/*
* This file was generated by a tool.
* Rerun sql-ts to regenerate this file.
*/
export interface Ckb2ethEntity {
  'bridgeFeeNeededAmount': string;
  'bridgeFeeRecipientArgs'?: any | null;
  'bridgeFeeRecipientCodeHash'?: any | null;
  'bridgeFeeRecipientHashType'?: any | null;
  'bridgeFeeState': string;
  'bridgeMessageMintNftRecipient'?: any | null;
  'bridgeMessageSignature'?: any | null;
  'bridgeMessageState': string;
  
  /** deposit at which block number */
  'depositBlockNumber': number;
  'depositFromArgs': any;
  'depositFromCodeHash': any;
  'depositFromHashType': any;
  
  /** deposited NFT TokenID */
  'depositNftId': any;
  
  /** 0x01 for mNFT, 0x02 for CoTA */
  'depositNftProposalType': number;
  
  /** deposit NFT cell output of a transaction */
  'depositOutputIndexOfTx': number;
  
  /** the index of all deposit records, for deriving a bridge fee recipient address */
  'depositSequenceNumber': number;
  'depositState': string;
  'depositToArgs': any;
  'depositToCodeHash': any;
  'depositToHashType': any;
  
  /** deposit transaction hash */
  'depositTxHash': any;
  
  /** deposit transaction index of a block */
  'depositTxIndexOfBlock': number;
  'id'?: number;
  'mintMappedNftId'?: any | null;
  
  /** signed mint transaction */
  'mintSignedTx'?: any | null;
  'mintState': string;
  
  /** mint transaction hash on Ethereum */
  'mintTxHash'?: any | null;
  
  /** mint transaction nonce */
  'mintTxNonce'?: number | null;
}
export interface Ckb2ethBridgeFeeEntity {
  'amount': string;
  
  /** foreign key of ckb2eth */
  'ckb2ethDepositSequenceNumber': number;
  'id'?: number;
  
  /** bridge fee paid transaction hash */
  'txHash': any;
}
